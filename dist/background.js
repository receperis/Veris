(()=>{importScripts("./service/database.service.js"),importScripts("./service/exercise.service.js"),importScripts("./service/stats.service.js"),importScripts("./service/notification.service.js"),importScripts("./service/message.service.js");try{NotificationService.setup()}catch(e){console.error("[Background] Failed to initialize NotificationService:",e)}chrome.runtime.onInstalled.addListener(async()=>{console.log("Chrome extension installed");try{await DatabaseService.init(),console.log("Database service initialized")}catch(e){console.error("Failed to initialize database:",e)}chrome.storage.sync.set({exerciseSettings:{enabled:!0,time:"09:00",days:[1,2,3,4,5],difficulty:"mixed",questionsPerSession:10}}),ExerciseService.setupDailyAlarm()}),chrome.runtime.onStartup.addListener(async()=>{console.log("Chrome browser started");try{await DatabaseService.init(),console.log("Database service initialized on startup")}catch(e){console.error("Failed to initialize database on startup:",e)}ExerciseService.setupDailyAlarm()}),MessageService.setupMessageListener(),chrome.alarms.onAlarm.addListener(e=>{"daily-exercise"===e.name?ExerciseService.handleDailyExerciseAlarm():"test-exercise"===e.name&&(console.log("[Background] test-exercise alarm fired"),ExerciseService.handleDailyExerciseAlarm())}),chrome.tabs.onUpdated.addListener((e,r,i)=>{"complete"===r.status&&i.url&&!i.url.startsWith("chrome://")&&chrome.tabs.detectLanguage(e,e=>{chrome.runtime.lastError?console.error("Language detection error:",chrome.runtime.lastError.message):chrome.storage.sync.set({sourceLanguage:e},()=>{chrome.runtime.lastError&&console.error("Persist error:",chrome.runtime.lastError.message)})})}),console.log("Background service worker initialized with modular services")})();